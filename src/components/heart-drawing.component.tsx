import { useCallback, useEffect, useState } from "react";
import { motion } from "framer-motion";
import "./HeartDrawing.css";
import AnimatedText from "./hand-written.component";
import img from "../assets/img/cover.jpg";
const HeartDrawing = () => {
  const [path, setPath] = useState("");
  const [key, setKey] = useState(0);

  const [startText, setStartText] = useState<boolean>(false);

  const [dimensions, setDimensions] = useState({
    width: window.innerWidth,
    height: window.innerHeight,
  });

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—É—Ç–∏ —Å–µ—Ä–¥—Ü–∞
  const generateHeartPath = useCallback((width: number, height: number) => {
    const points = [];
    const numPoints = 200; // –£–≤–µ–ª–∏—á–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–π —Ñ–æ—Ä–º—ã

    // –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Å—à—Ç–∞–± –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ —Ä–∞–∑–º–µ—Ä—É —ç–∫—Ä–∞–Ω–∞
    // –£—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω
    const padding = Math.min(width, height) * 0.15;
    const scaleX = (width - padding * 2) / 32;
    const scaleY = (height - padding * 2) / 30;
    const scale = Math.min(scaleX, scaleY); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏

    // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∞
    const centerX = width / 2;
    const centerY = height / 2;

    for (let i = 0; i < numPoints; i++) {
      const t = (i / numPoints) * 2 * Math.PI;

      // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–µ—Ä–¥—Ü–∞
      const x = 16 * Math.pow(Math.sin(t), 3);
      const y =
        13 * Math.cos(t) -
        5 * Math.cos(2 * t) -
        2 * Math.cos(3 * t) -
        Math.cos(4 * t);

      // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
      const scaledX = centerX + x * scale;
      const scaledY = centerY - y * scale; // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Y –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏

      points.push(`${scaledX},${scaledY}`);
    }

    // –°–æ–∑–¥–∞–µ–º SVG path –∏ –∑–∞–º—ã–∫–∞–µ–º —Ñ–æ—Ä–º—É
    return `M${points[0]} ${points
      .slice(1)
      .map((point) => `L${point}`)
      .join(" ")} Z`;
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–Ω–∞
  const handleResize = useCallback(() => {
    setDimensions({
      width: window.innerWidth,
      height: window.innerHeight,
    });
  }, []);

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–∏ —Å–µ—Ä–¥—Ü–∞ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–µ—Å–∞–π–∑–∞
  useEffect(() => {
    setPath(generateHeartPath(dimensions.width, dimensions.height));

    window.addEventListener("resize", handleResize);

    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, [dimensions.width, dimensions.height, generateHeartPath, handleResize]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
  useEffect(() => {
    setPath(generateHeartPath(dimensions.width, dimensions.height));
  }, [dimensions, generateHeartPath]);

  // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
  const restartAnimation = useCallback(() => {
    setStartText(false);
    setKey((prevKey) => prevKey + 1);
  }, []);

  const handleOnHeartComplete = () => {
    setStartText(true);
  };

  // –í–∞—Ä–∏–∞–Ω—Ç—ã –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –ø—É—Ç–∏
  const pathVariants = {
    hidden: {
      pathLength: 0,
      fill: "rgba(255, 0, 0, 0)",
    },
    visible: {
      pathLength: 1,
      fill: "rgba(255, 0, 0, 0.7)",
      transition: {
        pathLength: { duration: 3, ease: "easeInOut" },
        fill: { duration: 2, delay: 2.5, ease: "easeInOut" },
      },
    },
    beat: {
      scale: [1, 1.2, 1],
      transition: {
        duration: 1.5,
        repeat: Infinity,
        repeatType: "loop" as const,
        ease: "easeInOut",
      },
    },
  };

  return (
    <div className="heart-container">
      <motion.svg
        key={key}
        className="heart-svg"
        width={dimensions.width}
        height={dimensions.height}
        viewBox={`0 0 ${dimensions.width} ${dimensions.height + 200}`}
        initial="hidden"
        animate={`${startText ? "visible" : pathVariants["beat"]}`}
      >
        <motion.path
          d={path}
          variants={pathVariants}
          stroke="#ff0055"
          strokeWidth={Math.max(
            2,
            Math.min(dimensions.width, dimensions.height) / 200
          )}
          initial="hidden"
          animate="visible"
          fill="transparent"
          strokeLinecap="round"
          strokeLinejoin="round"
          onAnimationComplete={handleOnHeartComplete}
        />

        <motion.defs>
          <motion.clipPath id="customClipPath">
            <motion.path
              d={path}
              variants={pathVariants}
              stroke="#ff0055"
              strokeWidth={Math.max(
                2,
                Math.min(dimensions.width, dimensions.height) / 200
              )}
              initial="hidden"
              animate="visible"
              fill="transparent"
              strokeLinecap="round"
              strokeLinejoin="round"
              onAnimationComplete={handleOnHeartComplete}
            />
          </motion.clipPath>
        </motion.defs>

        {startText && (
          <motion.image
            animate="visible"
            variants={pathVariants}
            href={img}
            width="100%"
            height="100%"
            clipPath="url(#customClipPath)"
            style={{
              objectFit: "cover",
            }}
          />
        )}
      </motion.svg>
      {startText && (
        <AnimatedText text="–° 8 –º–∞—Ä—Ç–∞, –ø—Ä–∏–Ω—Ü–µ—Å—Å–∞!" className="heart-title" />
      )}

      <div className="controls">
        {startText && (
          <AnimatedText text="–°–∏—è–π!üñ§" className="heart-discription" />
        )}
        <button className="replay-button" onClick={restartAnimation}>
          –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
      <span
        style={{
          position: "absolute",
          bottom: "1%",
          left: "1%",
          fontFamily: "roboto",
          color: "rgba(0,0,0,0.45)",
        }}
      >
        created by @vlim_nikitin
      </span>
    </div>
  );
};

export default HeartDrawing;
